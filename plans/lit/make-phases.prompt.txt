Read plans/lit/LIT-DESIGN.md, which describes a large UI refactor in this codebase. Break the plan into phases, where each phase is largely self-contained, coherent, and leaves the whole app in a working state with passing tests/lint at the end. We do not care about backward compatability and users will not use it between phases, but it's important to keep our tests/lint in a happy place between phases so that we can be sure of correctness. I expect the first phase will involve bootstrapping and setting up a skeleton end-to-end and later phases will migrate components into the new skeleton from the old one, but if there's a better way then let me know. You may read the codebase as needed to inform decisions, but follow the plan outlined in LIT-DESIGN.md. Do not modify any code, only create a new markdown file plans/lit/PHASES.md describing the phases in detail, with context for each phase, references to relevant source files, or example code as needed.
